/*
 * A Todo list application
 *
 * From the todo list tutorial on goswagger.io
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TodosApiController binds http requests to an api service and writes the service results to the http response
type TodosApiController struct {
	service TodosApiServicer
	errorHandler ErrorHandler
}

// TodosApiOption for how the controller is set up.
type TodosApiOption func(*TodosApiController)

// WithTodosApiErrorHandler inject ErrorHandler into controller
func WithTodosApiErrorHandler(h ErrorHandler) TodosApiOption {
	return func(c *TodosApiController) {
		c.errorHandler = h
	}
}

// NewTodosApiController creates a default api controller
func NewTodosApiController(s TodosApiServicer, opts ...TodosApiOption) Router {
	controller := &TodosApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TodosApiController
func (c *TodosApiController) Routes() Routes {
	return Routes{ 
		{
			"AddOne",
			strings.ToUpper("Post"),
			"/",
			c.AddOne,
		},
		{
			"DestroyOne",
			strings.ToUpper("Delete"),
			"/{id}",
			c.DestroyOne,
		},
		{
			"FindTodos",
			strings.ToUpper("Get"),
			"/",
			c.FindTodos,
		},
		{
			"UpdateOne",
			strings.ToUpper("Put"),
			"/{id}",
			c.UpdateOne,
		},
	}
}

// AddOne - 
func (c *TodosApiController) AddOne(w http.ResponseWriter, r *http.Request) {
	itemParam := Item{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&itemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertItemRequired(itemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddOne(r.Context(), itemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DestroyOne - 
func (c *TodosApiController) DestroyOne(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.DestroyOne(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindTodos - 
func (c *TodosApiController) FindTodos(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	sinceParam, err := parseInt64Parameter(query.Get("since"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.FindTodos(r.Context(), sinceParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateOne - 
func (c *TodosApiController) UpdateOne(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseInt64Parameter(params["id"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	itemParam := Item{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&itemParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertItemRequired(itemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOne(r.Context(), idParam, itemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
