/*
 * A Todo list application
 *
 * From the todo list tutorial on goswagger.io
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"fmt"
	"net/http"
	"sync"
	"sync/atomic"
)

// TodosApiService is a service that implements the logic for the TodosApiServicer
// This service should implement the business logic for every endpoint for the TodosApi API.
// Include any external packages or services that will be required by this service.
type TodosApiService struct {
}

// NewTodosApiService creates a default api service
func NewTodosApiService() TodosApiServicer {
	return &TodosApiService{}
}

// AddOne -
func (s *TodosApiService) AddOne(ctx context.Context, item Item) (ImplResponse, error) {
	newItem, _ := addItem(&item)
	return Response(http.StatusCreated, newItem), nil
}

// DestroyOne -
func (s *TodosApiService) DestroyOne(ctx context.Context, id int64) (ImplResponse, error) {
	err := deleteItem(id)
	if err != nil {
		return Response(http.StatusNotFound,
			ModelError{
				Code:    http.StatusNotFound,
				Message: fmt.Sprintf("not fountd id:%d", id),
			}), nil
	} else {
		return Response(http.StatusNoContent, nil), nil
	}
}

// FindTodos -
func (s *TodosApiService) FindTodos(ctx context.Context, since int64, limit int32) (ImplResponse, error) {
	if limit == 0 {
		limit = 20
	}

	result := getItems(since, limit)
	return Response(http.StatusOK, result), nil
}

// UpdateOne -
func (s *TodosApiService) UpdateOne(ctx context.Context, id int64, item Item) (ImplResponse, error) {
	res, err := updateItem(id, &item)
	if err != nil {
		return Response(http.StatusNotFound,
			ModelError{
				Code:    http.StatusNotFound,
				Message: fmt.Sprintf("not fountd id:%d", id),
			}), nil
	} else {
		return Response(http.StatusOK, res), nil
	}
}

var (
	items     = make(map[int64]*Item)
	lastID    int64
	itemsLock = &sync.Mutex{}
)

func getItems(since int64, limit int32) (result []*Item) {
	result = make([]*Item, 0)
	for id, item := range items {
		if len(result) >= int(limit) {
			return
		}
		if since == 0 || id > since {
			result = append(result, item)
		}
	}
	return
}

func addItem(item *Item) (*Item, error) {
	itemsLock.Lock()
	defer itemsLock.Unlock()

	id := atomic.AddInt64(&lastID, 1)
	newItem := &Item{
		Description: item.Description,
		Id:          id,
		Completed:   false,
	}

	items[id] = newItem

	return newItem, nil
}

func updateItem(id int64, item *Item) (*Item, error) {
	itemsLock.Lock()
	defer itemsLock.Unlock()

	_, exixst := items[id]
	if !exixst {
		return nil, fmt.Errorf("not fountd id:%d", id)
	}

	newItem := &Item{
		Description: item.Description,
		Id:          id,
		Completed:   item.Completed,
	}

	items[newItem.Id] = newItem

	return newItem, nil
}

func deleteItem(id int64) error {
	itemsLock.Lock()
	defer itemsLock.Unlock()

	_, exixst := items[id]
	if !exixst {
		return fmt.Errorf("not fountd id:%d", id)
	}

	delete(items, id)

	return nil
}
